//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockTracking.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockTrackingEntities6 : DbContext
    {
        public StockTrackingEntities6()
            : base("name=StockTrackingEntities6")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CATEGORY> CATEGORies { get; set; }
        public virtual DbSet<CUSTOMER> CUSTOMERs { get; set; }
        public virtual DbSet<PERMISSION> PERMISSIONs { get; set; }
        public virtual DbSet<PRODUCT> PRODUCTs { get; set; }
        public virtual DbSet<SALE> SALES { get; set; }
        public virtual DbSet<USER> USERs { get; set; }
    
        public virtual ObjectResult<GenerateProductsReport_Result> GenerateProductsReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateProductsReport_Result>("GenerateProductsReport");
        }
    
        public virtual int GenerateRandomData(string customerName, string categoryName, string productName, Nullable<int> stockAmount, Nullable<int> price)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("categoryName", categoryName) :
                new ObjectParameter("categoryName", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var stockAmountParameter = stockAmount.HasValue ?
                new ObjectParameter("stockAmount", stockAmount) :
                new ObjectParameter("stockAmount", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateRandomData", customerNameParameter, categoryNameParameter, productNameParameter, stockAmountParameter, priceParameter);
        }
    }
}
